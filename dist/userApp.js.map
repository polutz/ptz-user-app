{"version":3,"sources":["../dist-esnext/userApp.js"],"names":["V","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","getSalt","pHash","curry","secret","user","pEcode","pDecode","createApp","userAppArgs","userRepository","saveUser","hashPass","hashPassword","createUser","isValid","updateUser","otherUsersWithSameUserNameOrEmail","findUsers","find","authUser","getByUserNameOrEmail","getAuthToken","verifyAuthToken","updatePassword","updatePasswordToken","deleteUser","seed","hashArg","password","Promise","resolve","passwordHash","undefined","func","args","userArgs","createdBy","authedUser","getOtherUsersWithSameUserNameOrEmail","otherUsers","getById","id","userDb","save","query","limit","options","form","userNameOrEmail","isPasswordCorrect","authUserFormArg","authUserArg","encodeArgs","authToken","errors","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","decodeArgs","token","users","allUsers","forEach"],"mappings":"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","file":"userApp.js","sourcesContent":["import { allErrors, authUserForm, createUser, otherUsersWithSameUserNameOrEmail, updateUser as updateUserFunc, users as usersToSeed } from '@alanmarcell/ptz-user-domain';\nimport * as V from 'ptz-validations';\nimport { compare, hash } from 'bcryptjs';\nimport { decode, encode } from 'jwt-simple';\nimport R from 'ramda';\nexport let tokenSecret = process.env.PASSWORD_SALT;\nexport let passwordSalt = process.env.PASSWORD_SALT;\nconst getSalt = () => {\n    tokenSecret = process.env.PASSWORD_SALT;\n    passwordSalt = process.env.PASSWORD_SALT;\n};\nexport const pHash = R.curry((secret) => (user) => hash(user, secret));\nexport const pEcode = R.curry((secret) => (user) => encode(user, secret));\nexport const pDecode = R.curry((secret) => (user) => decode(user, secret));\nexport const createApp = (userAppArgs) => {\n    getSalt();\n    const userRepository = userAppArgs.userRepository;\n    return {\n        saveUser: saveUser({\n            userRepository,\n            hashPass: hashPassword(pHash(tokenSecret)),\n            createUser,\n            isValid: V.isValid,\n            updateUser: updateUserFunc,\n            otherUsersWithSameUserNameOrEmail\n        }),\n        findUsers: findUsers(userRepository.find),\n        authUser: authUser(userRepository.getByUserNameOrEmail),\n        getAuthToken: getAuthToken(authUserForm, authUser(userRepository.getByUserNameOrEmail), pEcode(tokenSecret)),\n        verifyAuthToken: verifyAuthToken(pDecode(tokenSecret)),\n        updatePassword,\n        updatePasswordToken,\n        deleteUser,\n        hashPassword: hashPassword(pHash(tokenSecret)),\n        seed: seed(userRepository)\n    };\n};\nexport const hashPassword = R.curry(async (hashArg, user) => {\n    if (!user.password)\n        return Promise.resolve(user);\n    user.passwordHash = await hashArg(user.password);\n    user.password = undefined;\n    return Promise.resolve(user);\n});\nexport const saveUser = R.curry(async (func, args) => {\n    args.userArgs.createdBy = args.authedUser;\n    var user = func.createUser ? func.createUser(args.userArgs) : createUser(args.userArgs);\n    user = await func.hashPass(user);\n    if (!func.isValid(user))\n        return Promise.resolve(user);\n    const otherUsers = await func.userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n    user = func.otherUsersWithSameUserNameOrEmail(user, otherUsers);\n    if (!V.isValid(user))\n        return Promise.resolve(user);\n    const userDb = await func.userRepository.getById(user.id);\n    if (userDb)\n        user = func.updateUser(userDb, user);\n    user = await func.userRepository.save(user);\n    return Promise.resolve(user);\n});\n// tslint:disable-next-line:max-line-length\nexport const findUsers = R.curry(async (find, args) => find(args.query, { limit: args.options.limit }));\nexport const authUser = R.curry(async (getByUserNameOrEmail, args) => {\n    const { form } = args;\n    const user = await getByUserNameOrEmail(form.userNameOrEmail);\n    if (!user)\n        return Promise.resolve(null);\n    const isPasswordCorrect = await compare(form.password, user.passwordHash);\n    return Promise.resolve(isPasswordCorrect ? user : null);\n});\nexport const getAuthToken = R.curry(async (authUserFormArg, authUserArg, encodeArgs, args) => {\n    const form = authUserFormArg(args.form);\n    var authToken = null;\n    if (!V.isValid(form))\n        return Promise.resolve({\n            authToken,\n            user: null,\n            errors: form.errors\n        });\n    const user = await authUserArg(args);\n    const errors = [];\n    if (user == null)\n        errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\n    else\n        authToken = encodeArgs(user);\n    return Promise.resolve({\n        authToken,\n        user,\n        errors\n    });\n});\n// tslint:disable-next-line:max-line-length\nexport const verifyAuthToken = R.curry((decodeArgs, args) => {\n    const user = decodeArgs(args.token);\n    return Promise.resolve(user);\n});\nexport const seed = R.curry((userRepository, authedUser) => {\n    const users = usersToSeed.allUsers;\n    users.forEach(async (user) => await saveUser({ userRepository }, { userArgs: user, authedUser }));\n    return Promise.resolve(true);\n});\nexport const updatePassword = (args) => {\n    return Promise.resolve(false);\n};\nexport const updatePasswordToken = (args) => {\n    return Promise.resolve(false);\n};\nexport const deleteUser = (args) => {\n    return Promise.resolve(false);\n};\n//# sourceMappingURL=userApp.js.map"]}