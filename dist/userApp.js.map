{"version":3,"sources":["../dist-esnext/userApp.js"],"names":["UserApp","userAppArgs","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","userRepository","action","type","actions","SAVE","GET_AUTH_TOKEN","saveUser","args","getAuthToken","user","password","Promise","resolve","Error","passwordHash","undefined","userArgs","createdBy","authedUser","hashPassword","isValid","getOtherUsersWithSameUserNameOrEmail","otherUsers","otherUsersWithSameUserNameOrEmail","getById","id","userDb","update","save","find","query","limit","options","form","getByUserNameOrEmail","userNameOrEmail","isPasswordCorrect","authToken","errors","authUser","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","token","log","allUsers","ip","dtCreated","Date","displayName","email","userName","forEach"],"mappings":"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","file":"userApp.js","sourcesContent":["import { compare, hash } from 'bcryptjs';\nimport { decode, encode } from 'jwt-simple';\nimport { BaseApp } from 'ptz-core-app';\nimport { allErrors, AuthUserForm, User, users } from 'ptz-user-domain';\nexport default class UserApp extends BaseApp {\n    constructor(userAppArgs) {\n        super(userAppArgs);\n        this.tokenSecret = process.env.PASSWORD_SALT;\n        this.passwordSalt = process.env.PASSWORD_SALT;\n        this.userRepository = userAppArgs.userRepository;\n    }\n    async execAction(action) {\n        switch (action.type) {\n            case UserApp.actions.SAVE:\n                return await this.saveUser(action.args);\n            case UserApp.actions.GET_AUTH_TOKEN:\n                return await this.getAuthToken(action.args);\n        }\n    }\n    async hashPassword(user) {\n        if (!user.password)\n            return Promise.resolve(user);\n        if (!this.passwordSalt)\n            throw new Error('passwordSalt not added to process.env.');\n        user.passwordHash = await hash(user.password, this.passwordSalt);\n        user.password = undefined;\n        return Promise.resolve(user);\n    }\n    async saveUser(args) {\n        args.userArgs.createdBy = args.authedUser;\n        var user = new User(args.userArgs);\n        user = await this.hashPassword(user);\n        if (!user.isValid())\n            return Promise.resolve(user);\n        const otherUsers = await this.userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n        if (user.otherUsersWithSameUserNameOrEmail(otherUsers))\n            return Promise.resolve(user);\n        const userDb = await this.userRepository.getById(user.id);\n        if (userDb)\n            user = userDb.update(user);\n        user = await this.userRepository.save(user);\n        return Promise.resolve(user);\n    }\n    findUsers(args) {\n        return this.userRepository.find(args.query, { limit: args.options.limit });\n    }\n    async authUser(args) {\n        const { form } = args;\n        const user = await this.userRepository.getByUserNameOrEmail(form.userNameOrEmail);\n        if (!user)\n            return Promise.resolve(null);\n        const isPasswordCorrect = await compare(form.password, user.passwordHash);\n        return Promise.resolve(isPasswordCorrect ? user : null);\n    }\n    async getAuthToken(args) {\n        const form = new AuthUserForm(args.form);\n        var authToken = null;\n        if (!form.isValid())\n            return Promise.resolve({\n                authToken,\n                user: null,\n                errors: form.errors\n            });\n        const user = await this.authUser(args);\n        const errors = [];\n        if (user == null)\n            errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\n        else\n            authToken = encode(user, this.tokenSecret);\n        return Promise.resolve({\n            authToken,\n            user,\n            errors\n        });\n    }\n    verifyAuthToken(args) {\n        const user = decode(args.token, this.passwordSalt);\n        return Promise.resolve(user);\n    }\n    async seed() {\n        this.log('seeding users', users.allUsers);\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'Seed',\n                id: 'ptz-user-app UserApp.seed()',\n                email: '',\n                userName: ''\n            }\n        };\n        users.allUsers.forEach(async (user) => await this.saveUser({ userArgs: user, authedUser }));\n    }\n    async updatePassword(args) {\n        return Promise.resolve(false);\n    }\n    async updatePasswordToken(args) {\n        return Promise.resolve(false);\n    }\n    async deleteUser(args) {\n        return Promise.resolve(false);\n    }\n}\nUserApp.actions = {\n    SAVE: 'USER_APP_SAVE',\n    GET_AUTH_TOKEN: 'GET_AUTH_TOKEN'\n};\n//# sourceMappingURL=userApp.js.map"]}