{"version":3,"sources":["../dist-esnext/userApp.js"],"names":["UserApp","userAppArgs","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","userRepository","user","password","Promise","resolve","Error","passwordHash","undefined","args","userArgs","createdBy","authedUser","hashPassword","isValid","getOtherUsersWithSameUserNameOrEmail","otherUsers","otherUsersWithSameUserNameOrEmail","getById","id","userDb","update","save","find","query","limit","options","form","getByUserNameOrEmail","userNameOrEmail","isPasswordCorrect","authToken","errors","authUser","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","token","users","allUsers","log","ip","dtCreated","Date","displayName","email","userName","forEach","saveUser"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;IACqBA,O;;;AACjB,qBAAYC,WAAZ,EAAyB;AAAA;;AAErB;AACA;AACA;AACA;AACA;AANqB,sHACfA,WADe;;AAOrB,cAAKC,WAAL,GAAmBC,QAAQC,GAAR,CAAYC,aAA/B;AACA,cAAKC,YAAL,GAAoBH,QAAQC,GAAR,CAAYC,aAAhC;AACA,cAAKE,cAAL,GAAsBN,YAAYM,cAAlC;AATqB;AAUxB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;kFACmBC,I;;;;;oCACVA,KAAKC,Q;;;;;iEACCC,QAAQC,OAAR,CAAgBH,IAAhB,C;;;oCACN,KAAKF,Y;;;;;sCACA,IAAIM,KAAJ,CAAU,wCAAV,C;;;;uCACgB,oBAAKJ,KAAKC,QAAV,EAAoB,KAAKH,YAAzB,C;;;AAA1BE,qCAAKK,Y;;AACLL,qCAAKC,QAAL,GAAgBK,SAAhB;iEACOJ,QAAQC,OAAR,CAAgBH,IAAhB,C;;;;;;;;;;;;;;;;;;;oFAEIO,I;;;;;;AACXA,qCAAKC,QAAL,CAAcC,SAAd,GAA0BF,KAAKG,UAA/B;AACIV,oC,GAAO,wBAASO,KAAKC,QAAd,C;;uCACE,KAAKG,YAAL,CAAkBX,IAAlB,C;;;AAAbA,oC;;oCACKA,KAAKY,OAAL,E;;;;;kEACMV,QAAQC,OAAR,CAAgBH,IAAhB,C;;;;uCACc,KAAKD,cAAL,CAAoBc,oCAApB,CAAyDb,IAAzD,C;;;AAAnBc,0C;;qCACFd,KAAKe,iCAAL,CAAuCD,UAAvC,C;;;;;kEACOZ,QAAQC,OAAR,CAAgBH,IAAhB,C;;;;uCACU,KAAKD,cAAL,CAAoBiB,OAApB,CAA4BhB,KAAKiB,EAAjC,C;;;AAAfC,sC;;AACN,oCAAIA,MAAJ,EACIlB,OAAOkB,OAAOC,MAAP,CAAcnB,IAAd,CAAP;;uCACS,KAAKD,cAAL,CAAoBqB,IAApB,CAAyBpB,IAAzB,C;;;AAAbA,oC;kEACOE,QAAQC,OAAR,CAAgBH,IAAhB,C;;;;;;;;;;;;;;;;;;kCAEDO,I,EAAM;AACZ,mBAAO,KAAKR,cAAL,CAAoBsB,IAApB,CAAyBd,KAAKe,KAA9B,EAAqC,EAAEC,OAAOhB,KAAKiB,OAAL,CAAaD,KAAtB,EAArC,CAAP;AACH;;;;oFACchB,I;;;;;;AACHkB,oC,GAASlB,I,CAATkB,I;;uCACW,KAAK1B,cAAL,CAAoB2B,oBAApB,CAAyCD,KAAKE,eAA9C,C;;;AAAb3B,oC;;oCACDA,I;;;;;kEACME,QAAQC,OAAR,CAAgB,IAAhB,C;;;;uCACqB,uBAAQsB,KAAKxB,QAAb,EAAuBD,KAAKK,YAA5B,C;;;AAA1BuB,iD;kEACC1B,QAAQC,OAAR,CAAgByB,oBAAoB5B,IAApB,GAA2B,IAA3C,C;;;;;;;;;;;;;;;;;;;oFAEQO,I;;;;;;AACTkB,oC,GAAO,gCAAiBlB,KAAKkB,IAAtB,C;AACTI,yC,GAAY,I;;oCACXJ,KAAKb,OAAL,E;;;;;kEACMV,QAAQC,OAAR,CAAgB;AACnB0B,wDADmB;AAEnB7B,0CAAM,IAFa;AAGnB8B,4CAAQL,KAAKK;AAHM,iCAAhB,C;;;;uCAKQ,KAAKC,QAAL,CAAcxB,IAAd,C;;;AAAbP,oC;AACA8B,sC,GAAS,E;;AACf,oCAAI9B,QAAQ,IAAZ,EACI8B,OAAOE,IAAP,CAAY,yBAAUC,uDAAtB,EADJ,KAGIJ,YAAY,uBAAO7B,IAAP,EAAa,KAAKN,WAAlB,CAAZ;kEACGQ,QAAQC,OAAR,CAAgB;AACnB0B,wDADmB;AAEnB7B,8CAFmB;AAGnB8B;AAHmB,iCAAhB,C;;;;;;;;;;;;;;;;;;wCAMKvB,I,EAAM;AAClB,gBAAMP,OAAO,uBAAOO,KAAK2B,KAAZ,EAAmB,KAAKpC,YAAxB,CAAb;AACA,mBAAOI,QAAQC,OAAR,CAAgBH,IAAhB,CAAP;AACH;;;;;;;oBACUmC,K,uEAAQ,qBAAYC,Q;;;;;;AAC3B,qCAAKC,GAAL,CAAS,eAAT,EAA0BF,KAA1B;AACMzB,0C,GAAa;AACf4B,wCAAI,EADW;AAEfC,+CAAW,IAAIC,IAAJ,EAFI;AAGfxC,0CAAM;AACFyC,qDAAa,MADX;AAEFxB,4CAAI,6BAFF;AAGFyB,+CAAO,EAHL;AAIFC,kDAAU;AAJR;AAHS,iC;;AAUnBR,sCAAMS,OAAN;AAAA,0FAAc,kBAAO5C,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAAsB,OAAK6C,QAAL,CAAc,EAAErC,UAAUR,IAAZ,EAAkBU,sBAAlB,EAAd,CAAtB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAd;;AAAA;AAAA;AAAA;AAAA;kEACOR,QAAQC,OAAR,E;;;;;;;;;;;;;;;;;;;oFAEUI,I;;;;;kEACVL,QAAQC,OAAR,CAAgB,KAAhB,C;;;;;;;;;;;;;;;;;;;oFAEeI,I;;;;;kEACfL,QAAQC,OAAR,CAAgB,KAAhB,C;;;;;;;;;;;;;;;;;;;oFAEMI,I;;;;;kEACNL,QAAQC,OAAR,CAAgB,KAAhB,C;;;;;;;;;;;;;;;;;;;;AAGf;;;kBA1GqBX,O","file":"userApp.js","sourcesContent":["import { compare, hash } from 'bcryptjs';\nimport { decode, encode } from 'jwt-simple';\nimport { BaseApp } from 'ptz-core-app';\nimport { allErrors, AuthUserForm, User, users as usersToSeed } from 'ptz-user-domain';\nexport default class UserApp extends BaseApp {\n    constructor(userAppArgs) {\n        super(userAppArgs);\n        // TODO: Actions\n        // static actions = {\n        //     SAVE: 'USER_APP_SAVE',\n        //     GET_AUTH_TOKEN: 'GET_AUTH_TOKEN'\n        // };\n        this.tokenSecret = process.env.PASSWORD_SALT;\n        this.passwordSalt = process.env.PASSWORD_SALT;\n        this.userRepository = userAppArgs.userRepository;\n    }\n    // TODO: Actions\n    // async execAction(action) {\n    //     switch (action.type) {\n    //         case UserApp.actions.SAVE:\n    //             return await this.saveUser(action.args);\n    //         case UserApp.actions.GET_AUTH_TOKEN:\n    //             return await this.getAuthToken(action.args);\n    //     }\n    // }\n    async hashPassword(user) {\n        if (!user.password)\n            return Promise.resolve(user);\n        if (!this.passwordSalt)\n            throw new Error('passwordSalt not added to process.env.');\n        user.passwordHash = await hash(user.password, this.passwordSalt);\n        user.password = undefined;\n        return Promise.resolve(user);\n    }\n    async saveUser(args) {\n        args.userArgs.createdBy = args.authedUser;\n        var user = new User(args.userArgs);\n        user = await this.hashPassword(user);\n        if (!user.isValid())\n            return Promise.resolve(user);\n        const otherUsers = await this.userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n        if (user.otherUsersWithSameUserNameOrEmail(otherUsers))\n            return Promise.resolve(user);\n        const userDb = await this.userRepository.getById(user.id);\n        if (userDb)\n            user = userDb.update(user);\n        user = await this.userRepository.save(user);\n        return Promise.resolve(user);\n    }\n    findUsers(args) {\n        return this.userRepository.find(args.query, { limit: args.options.limit });\n    }\n    async authUser(args) {\n        const { form } = args;\n        const user = await this.userRepository.getByUserNameOrEmail(form.userNameOrEmail);\n        if (!user)\n            return Promise.resolve(null);\n        const isPasswordCorrect = await compare(form.password, user.passwordHash);\n        return Promise.resolve(isPasswordCorrect ? user : null);\n    }\n    async getAuthToken(args) {\n        const form = new AuthUserForm(args.form);\n        var authToken = null;\n        if (!form.isValid())\n            return Promise.resolve({\n                authToken,\n                user: null,\n                errors: form.errors\n            });\n        const user = await this.authUser(args);\n        const errors = [];\n        if (user == null)\n            errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\n        else\n            authToken = encode(user, this.tokenSecret);\n        return Promise.resolve({\n            authToken,\n            user,\n            errors\n        });\n    }\n    verifyAuthToken(args) {\n        const user = decode(args.token, this.passwordSalt);\n        return Promise.resolve(user);\n    }\n    async seed(users = usersToSeed.allUsers) {\n        this.log('seeding users', users);\n        const authedUser = {\n            ip: '',\n            dtCreated: new Date(),\n            user: {\n                displayName: 'Seed',\n                id: 'ptz-user-app UserApp.seed()',\n                email: '',\n                userName: ''\n            }\n        };\n        users.forEach(async (user) => await this.saveUser({ userArgs: user, authedUser }));\n        return Promise.resolve();\n    }\n    async updatePassword(args) {\n        return Promise.resolve(false);\n    }\n    async updatePasswordToken(args) {\n        return Promise.resolve(false);\n    }\n    async deleteUser(args) {\n        return Promise.resolve(false);\n    }\n}\n//# sourceMappingURL=userApp.js.map"]}