{"version":3,"sources":["../dist-esnext/userApp.js"],"names":["V","config","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","pHash","curry","secret","user","cEncode","cDecode","createApp","userAppArgs","userRepository","saveUser","hashPass","hashPassword","createUser","isValid","updateUser","otherUsersWithSameUserNameOrEmail","findUsers","find","authUser","getByUserNameOrEmail","getAuthToken","authUserForm","encode","verifyAuthToken","updatePassword","updatePasswordToken","deleteUser","seed","hashArg","password","Promise","resolve","passwordHash","undefined","func","args","userArgs","createdBy","authedUser","userHash","getOtherUsersWithSameUserNameOrEmail","otherUsers","userWithOtherUsers","getById","id","userDb","save","savedUser","query","limit","options","form","userNameOrEmail","isPasswordCorrect","authToken","errors","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","decodeArgs","token","users","allUsers","forEach"],"mappings":"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","file":"userApp.js","sourcesContent":["import { allErrors, authUserForm, createUser, otherUsersWithSameUserNameOrEmail, updateUser as updateUserFunc, users as usersToSeed } from '@alanmarcell/ptz-user-domain';\nimport { compare, hash } from 'bcryptjs';\nimport dotenv from 'dotenv';\nimport { decode, encode } from 'jwt-simple';\n// import { log } from 'ptz-log';\nimport * as V from 'ptz-validations';\nimport R from 'ramda';\ndotenv.config();\nexport let tokenSecret = process.env.PASSWORD_SALT;\nexport let passwordSalt = process.env.PASSWORD_SALT;\nexport const pHash = R.curry((secret) => (user) => hash(user, secret));\nexport const cEncode = R.curry((secret) => (user) => encode(user, secret));\nexport const cDecode = R.curry((secret) => (user) => decode(user, secret));\nexport const createApp = (userAppArgs) => {\n    const userRepository = userAppArgs.userRepository;\n    return {\n        saveUser: saveUser({\n            userRepository,\n            hashPass: hashPassword(pHash(tokenSecret)),\n            createUser,\n            isValid: V.isValid,\n            updateUser: updateUserFunc,\n            otherUsersWithSameUserNameOrEmail\n        }),\n        findUsers: findUsers(userRepository.find),\n        authUser: authUser(userRepository.getByUserNameOrEmail),\n        getAuthToken: getAuthToken({\n            authUserForm,\n            authUser: authUser(userRepository.getByUserNameOrEmail),\n            encode: cEncode(tokenSecret)\n        }),\n        verifyAuthToken: verifyAuthToken(cDecode(tokenSecret)),\n        updatePassword,\n        updatePasswordToken,\n        deleteUser,\n        hashPassword: hashPassword(pHash(tokenSecret)),\n        seed: seed(userRepository)\n    };\n};\nexport const hashPassword = R.curry(async (hashArg, user) => {\n    if (!user.password)\n        return Promise.resolve(user);\n    user.passwordHash = await hashArg(user.password);\n    user.password = undefined;\n    return Promise.resolve(user);\n});\nexport const saveUser = R.curry(async (func, args) => {\n    args.userArgs.createdBy = args.authedUser;\n    const user = func.createUser ? func.createUser(args.userArgs) : createUser(args.userArgs);\n    const userHash = func.hashPass ? await func.hashPass(user) : await hashPassword(pHash(tokenSecret), user);\n    if (func.isValid ? !func.isValid(userHash) : !V.isValid(userHash))\n        return Promise.resolve(userHash);\n    const otherUsers = await func.userRepository.getOtherUsersWithSameUserNameOrEmail(userHash);\n    var userWithOtherUsers = func.otherUsersWithSameUserNameOrEmail ?\n        func.otherUsersWithSameUserNameOrEmail(userHash, otherUsers) :\n        otherUsersWithSameUserNameOrEmail(userHash, otherUsers);\n    if (func.isValid ? !func.isValid(userWithOtherUsers) : !V.isValid(userWithOtherUsers))\n        return Promise.resolve(userWithOtherUsers);\n    const userDb = await func.userRepository.getById(userWithOtherUsers.id);\n    if (userDb)\n        userWithOtherUsers = func.updateUser ?\n            func.updateUser(userDb, userWithOtherUsers) :\n            updateUserFunc(userDb, userWithOtherUsers);\n    const savedUser = await func.userRepository.save(userWithOtherUsers);\n    return Promise.resolve(savedUser);\n});\n// tslint:disable-next-line:max-line-length\nexport const findUsers = R.curry(async (find, args) => find(args.query, { limit: args.options.limit }));\nexport const authUser = R.curry(async (getByUserNameOrEmail, args) => {\n    const { form } = args;\n    const user = await getByUserNameOrEmail(form.userNameOrEmail);\n    if (!user)\n        return Promise.resolve(null);\n    const isPasswordCorrect = await compare(form.password, user.passwordHash);\n    return Promise.resolve(isPasswordCorrect ? user : null);\n});\nexport const getAuthToken = R.curry(async (func, args) => {\n    const form = func.authUserForm(args.form);\n    var authToken = null;\n    if (!V.isValid(form))\n        return Promise.resolve({\n            authToken,\n            user: null,\n            errors: form.errors\n        });\n    const user = await func.authUser(args);\n    const errors = [];\n    if (user == null)\n        errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\n    else\n        authToken = func.encode(user);\n    return Promise.resolve({\n        authToken,\n        user,\n        errors\n    });\n});\n// tslint:disable-next-line:max-line-length\nexport const verifyAuthToken = R.curry((decodeArgs, args) => {\n    const user = decodeArgs(args.token);\n    return Promise.resolve(user);\n});\nexport const seed = R.curry((userRepository, authedUser) => {\n    const users = usersToSeed.allUsers;\n    users.forEach(async (user) => await saveUser({ userRepository }, { userArgs: user, authedUser }));\n    return Promise.resolve(true);\n});\nexport const updatePassword = (args) => {\n    return Promise.resolve(false);\n};\nexport const updatePasswordToken = (args) => {\n    return Promise.resolve(false);\n};\nexport const deleteUser = (args) => {\n    return Promise.resolve(false);\n};\n//# sourceMappingURL=userApp.js.map"]}