{"version":3,"sources":["../dist-esnext/userApp.js"],"names":["V","config","tokenSecret","process","env","PASSWORD_SALT","passwordSalt","pHash","curry","secret","user","cEncode","cDecode","createApp","userAppArgs","userRepository","saveUser","hashPass","hashPassword","createUser","isValid","updateUser","otherUsersWithSameUserNameOrEmail","findUsers","find","authUser","getByUserNameOrEmail","getAuthToken","authUserForm","encode","verifyAuthToken","updatePassword","updatePasswordToken","deleteUser","seed","hashArg","password","Promise","resolve","passwordHash","undefined","func","args","userArgs","createdBy","authedUser","userHash","otherUsers","getOtherUsersWithSameUserNameOrEmail","userWithOtherUsers","userDb","getById","id","savedUser","save","query","limit","options","form","userNameOrEmail","isPasswordCorrect","authToken","errors","push","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","decodeArgs","token","users","allUsers","forEach"],"mappings":"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","file":"userApp.js","sourcesContent":["import { compare, hash } from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport { decode, encode } from 'jwt-simple';\r\nimport { allErrors, authUserForm, createUser, otherUsersWithSameUserNameOrEmail, updateUser as updateUserFunc, users as usersToSeed } from 'ptz-user-domain';\r\n// import { log } from 'ptz-log';\r\nimport * as V from 'ptz-validations';\r\nimport R from 'ramda';\r\ndotenv.config();\r\nexport let tokenSecret = process.env.PASSWORD_SALT;\r\nexport let passwordSalt = process.env.PASSWORD_SALT;\r\nexport const pHash = R.curry((secret) => (user) => hash(user, secret));\r\nexport const cEncode = R.curry((secret) => (user) => encode(user, secret));\r\nexport const cDecode = R.curry((secret) => (user) => decode(user, secret));\r\nexport const createApp = (userAppArgs) => {\r\n    const userRepository = userAppArgs.userRepository;\r\n    return {\r\n        saveUser: saveUser({\r\n            userRepository,\r\n            hashPass: hashPassword(pHash(tokenSecret)),\r\n            createUser,\r\n            isValid: V.isValid,\r\n            updateUser: updateUserFunc,\r\n            otherUsersWithSameUserNameOrEmail\r\n        }),\r\n        findUsers: findUsers(userRepository.find),\r\n        authUser: authUser(userRepository.getByUserNameOrEmail),\r\n        getAuthToken: getAuthToken({\r\n            authUserForm,\r\n            authUser: authUser(userRepository.getByUserNameOrEmail),\r\n            encode: cEncode(tokenSecret)\r\n        }),\r\n        verifyAuthToken: verifyAuthToken(cDecode(tokenSecret)),\r\n        updatePassword,\r\n        updatePasswordToken,\r\n        deleteUser,\r\n        hashPassword: hashPassword(pHash(tokenSecret)),\r\n        seed: seed(userRepository)\r\n    };\r\n};\r\nexport const hashPassword = R.curry(async (hashArg, user) => {\r\n    if (!user.password)\r\n        return Promise.resolve(user);\r\n    user.passwordHash = await hashArg(user.password);\r\n    user.password = undefined;\r\n    return Promise.resolve(user);\r\n});\r\nexport const saveUser = R.curry(async (func, args) => {\r\n    args.userArgs.createdBy = args.authedUser;\r\n    const user = func.createUser ? func.createUser(args.userArgs) : createUser(args.userArgs);\r\n    const userHash = func.hashPass ? await func.hashPass(user) : await hashPassword(pHash(tokenSecret), user);\r\n    if (func.isValid ? !func.isValid(userHash) : !V.isValid(userHash))\r\n        return Promise.resolve(userHash);\r\n    const otherUsers = await func.userRepository.getOtherUsersWithSameUserNameOrEmail(userHash);\r\n    var userWithOtherUsers = func.otherUsersWithSameUserNameOrEmail ?\r\n        func.otherUsersWithSameUserNameOrEmail(userHash, otherUsers) :\r\n        otherUsersWithSameUserNameOrEmail(userHash, otherUsers);\r\n    if (func.isValid ? !func.isValid(userWithOtherUsers) : !V.isValid(userWithOtherUsers))\r\n        return Promise.resolve(userWithOtherUsers);\r\n    const userDb = await func.userRepository.getById(userWithOtherUsers.id);\r\n    if (userDb)\r\n        userWithOtherUsers = func.updateUser ?\r\n            func.updateUser(userDb, userWithOtherUsers) :\r\n            updateUserFunc(userDb, userWithOtherUsers);\r\n    const savedUser = await func.userRepository.save(userWithOtherUsers);\r\n    return Promise.resolve(savedUser);\r\n});\r\n// tslint:disable-next-line:max-line-length\r\nexport const findUsers = R.curry(async (find, args) => find(args.query, { limit: args.options.limit }));\r\nexport const authUser = R.curry(async (getByUserNameOrEmail, args) => {\r\n    const { form } = args;\r\n    const user = await getByUserNameOrEmail(form.userNameOrEmail);\r\n    if (!user)\r\n        return Promise.resolve(null);\r\n    const isPasswordCorrect = await compare(form.password, user.passwordHash);\r\n    return Promise.resolve(isPasswordCorrect ? user : null);\r\n});\r\nexport const getAuthToken = R.curry(async (func, args) => {\r\n    const form = func.authUserForm(args.form);\r\n    var authToken = null;\r\n    if (!V.isValid(form))\r\n        return Promise.resolve({\r\n            authToken,\r\n            user: null,\r\n            errors: form.errors\r\n        });\r\n    const user = await func.authUser(args);\r\n    const errors = [];\r\n    if (user == null)\r\n        errors.push(allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD);\r\n    else\r\n        authToken = func.encode(user);\r\n    return Promise.resolve({\r\n        authToken,\r\n        user,\r\n        errors\r\n    });\r\n});\r\n// tslint:disable-next-line:max-line-length\r\nexport const verifyAuthToken = R.curry((decodeArgs, args) => {\r\n    const user = decodeArgs(args.token);\r\n    return Promise.resolve(user);\r\n});\r\nexport const seed = R.curry((userRepository, authedUser) => {\r\n    const users = usersToSeed.allUsers;\r\n    users.forEach(async (user) => await saveUser({ userRepository }, { userArgs: user, authedUser }));\r\n    return Promise.resolve(true);\r\n});\r\nexport const updatePassword = (args) => {\r\n    return Promise.resolve(false);\r\n};\r\nexport const updatePasswordToken = (args) => {\r\n    return Promise.resolve(false);\r\n};\r\nexport const deleteUser = (args) => {\r\n    return Promise.resolve(false);\r\n};\r\n//# sourceMappingURL=userApp.js.map"]}