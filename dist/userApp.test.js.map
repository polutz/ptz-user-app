{"version":3,"sources":["../dist-esnext/userApp.test.js"],"names":["config","authedUser","dtCreated","Date","ip","notCalled","describe","userApp","userRepository","beforeEach","returns","it","userArgs","userName","email","displayName","password","saveUser","user","passwordHash","save","calledOnce","createdBy","dbUser","userSaved","userNameOrEmail","authUser","form","hashPassword","errors","getAuthToken","authToken","getByUserNameOrEmail","id","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","hasError","verifyAuthToken","token","userByToken"],"mappings":"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","file":"userApp.test.js","sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\nimport { contains, emptyArray, equal, notEmptyArray, notOk, ok } from 'ptz-assert';\nimport { allErrors, User } from 'ptz-user-domain';\nimport { spy, stub } from 'sinon';\nimport { UserApp } from './index';\nimport { UserRepositoryFake } from './UserRepositoryFake';\nconst authedUser = {\n    dtCreated: new Date(),\n    ip: '192.161.0.1'\n};\nconst notCalled = 'notCalled';\ndescribe('UserApp', () => {\n    describe('saveUser', () => {\n        describe('insert', () => {\n            var userApp, userRepository;\n            beforeEach(() => {\n                userRepository = new UserRepositoryFake(null);\n                spy(userRepository, 'save');\n                stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\n                userApp = new UserApp({ userRepository });\n            });\n            it('hash password', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Ângelo Ocanã',\n                    password: 'testPassword'\n                };\n                const user = await userApp.saveUser({ userArgs, authedUser });\n                ok(user.passwordHash, 'passwordHash not set');\n                notOk(user.password, 'password not empty');\n            });\n            it('do not call repository if user is invalid', async () => {\n                const userArgs = {\n                    userName: '',\n                    email: '',\n                    displayName: ''\n                };\n                await userApp.saveUser({ userArgs, authedUser });\n                ok(userRepository.save[notCalled]);\n            });\n            it('call repository if User is valid', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana'\n                };\n                await userApp.saveUser({ userArgs, authedUser });\n                const calledOnce = 'calledOnce';\n                ok(userRepository.save[calledOnce]);\n            });\n            it('set createdBy', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: ''\n                };\n                const user = await userApp.saveUser({ userArgs, authedUser });\n                equal(user.createdBy, authedUser);\n            });\n        });\n        describe('update', () => {\n            it('update when new user data is valid', async () => {\n                const userRepository = new UserRepositoryFake(null);\n                spy(userRepository, 'save');\n                stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\n                const dbUser = new User({\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana'\n                });\n                stub(userRepository, 'getById').returns(dbUser);\n                const userApp = new UserApp({ userRepository });\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana Updated'\n                };\n                const userSaved = await userApp.saveUser({ userArgs, authedUser });\n                const calledOnce = 'calledOnce';\n                ok(userRepository.save[calledOnce]);\n                equal(userSaved.displayName, userArgs.displayName);\n            });\n        });\n    });\n    describe('authUser', () => {\n        var userApp, userRepository;\n        beforeEach(() => {\n            userRepository = new UserRepositoryFake(null);\n            userApp = new UserApp({ userRepository });\n        });\n        it('return null when User not found', async () => {\n            const userNameOrEmail = 'angeloocana', password = 'teste';\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const user = await userApp.authUser({\n                form: { userNameOrEmail, password },\n                authedUser\n            });\n            notOk(user);\n        });\n        it('return null when User found but incorrect password', async () => {\n            const password = 'testeteste';\n            var user = new User({\n                userName: 'angeloocana',\n                email: '',\n                displayName: '',\n                password\n            });\n            user = await userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            user = await userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password: 'incorrectPassword'\n                },\n                authedUser\n            });\n            notOk(user);\n        });\n        it('return user when correct password', async () => {\n            const password = 'testeteste';\n            var user = new User({\n                userName: 'angeloocana',\n                email: 'alanmarcell@live.com',\n                displayName: 'Angelo Ocana',\n                password\n            });\n            user = await userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            user = await userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password\n                },\n                authedUser\n            });\n            ok(user);\n            emptyArray(user.errors);\n        });\n    });\n    describe('getAuthToken', () => {\n        it('add errors when invalid userName or Email', async () => {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'ln',\n                    password: 'testtest'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        });\n        it('add error when invalid password', async () => {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'angeloocana',\n                    password: 't'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        });\n        it('generate token when correct password', async () => {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            var user = new User({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br', displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            user = await userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            ok(authToken.user, 'no user');\n            ok(authToken.user.id, 'no user id');\n            emptyArray(authToken.errors, 'return errors');\n        });\n        it('add errors when incorrect password', async () => {\n            const userRepository = new UserRepositoryFake(null);\n            const userApp = new UserApp({ userRepository });\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            notOk(authToken.authToken, 'do not generate token');\n            notOk(authToken.user, 'do not return user');\n            contains(authToken.errors, allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD, 'return invalid userName, email or password error');\n        });\n    });\n    describe('verifyAuthToken', () => {\n        var userApp, userRepository;\n        beforeEach(() => {\n            userRepository = new UserRepositoryFake(null);\n            userApp = new UserApp({ userRepository });\n        });\n        it('Invalid token throws exception', async () => {\n            var hasError = false;\n            try {\n                await userApp.verifyAuthToken({\n                    token: 'Invalid_Token',\n                    authedUser\n                });\n            }\n            catch (err) {\n                hasError = true;\n            }\n            ok(hasError);\n        });\n        it('Valid token return user', async () => {\n            var user = new User({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br',\n                displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            user = await userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            const userByToken = await userApp.verifyAuthToken({\n                token: authToken.authToken,\n                authedUser\n            });\n            equal(userByToken.id, user.id, 'User Id dont match');\n            equal(userByToken.email, user.email, 'User Id dont match');\n            equal(userByToken.userName, user.userName, 'User Id dont match');\n            equal(userByToken.displayName, user.displayName, 'User Id dont match');\n        });\n    });\n    describe('updatePassword', () => {\n        it('return error when wrong password');\n        it('return error when invalid password');\n        it('update');\n    });\n    describe('updatePasswordToken', () => {\n        it('return error when wrong token');\n        it('return error when invalid password');\n        it('update');\n    });\n    describe('deleteUser', () => {\n        it('return error when user not found');\n        it('return error when authuser is not admin or the deleted user');\n        it('delete');\n    });\n    describe('findUsers', () => {\n        it('find');\n    });\n    describe('seed', () => {\n        it('seed');\n    });\n});\n//# sourceMappingURL=userApp.test.js.map"]}