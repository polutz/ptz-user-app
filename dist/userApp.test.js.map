{"version":3,"sources":["../dist-esnext/userApp.test.js"],"names":["config","authedUser","dtCreated","Date","ip","calledOnce","notCalled","userRepository","userApp","passwordSalt","process","env","PASSWORD_SALT","saveUser","beforeEach","returns","hashPass","isValid","updateUser","otherUsersWithSameUserNameOrEmail","describe","it","userArgs","userName","email","displayName","password","user","passwordHash","save","createdBy","dbUser","userSaved","userNameOrEmail","authUser","form","hashPassword","errors","authUserForm","encode","authToken","getByUserNameOrEmail","getAuthToken","id","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","hasError","verifyAuthToken","token","userByToken","dbUsers","name","query","options","limit","findUsers","users","find","skip","seed","seeded"],"mappings":"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","file":"userApp.test.js","sourcesContent":["import { allErrors, authUserForm, createUser, otherUsersWithSameUserNameOrEmail, updateUser } from '@alanmarcell/ptz-user-domain';\nimport dotenv from 'dotenv';\nimport { contains, emptyArray, equal, notEmptyArray, notOk, ok } from 'ptz-assert';\nimport { isValid } from 'ptz-validations';\nimport { spy, stub } from 'sinon';\nimport { authUser, cEncode, createApp, getAuthToken, hashPassword, pHash, saveUser as save, tokenSecret } from './index';\nimport { createUserRepoFake } from './UserRepositoryFake';\ndotenv.config();\nconst authedUser = {\n    dtCreated: new Date(),\n    ip: '192.161.0.1'\n};\nconst calledOnce = 'calledOnce', notCalled = 'notCalled';\nvar userRepository;\nvar userApp;\nconst passwordSalt = process.env.PASSWORD_SALT;\nvar saveUser;\nbeforeEach(() => {\n    userRepository = createUserRepoFake();\n    spy(userRepository, 'save');\n    stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\n    saveUser = save({\n        userRepository,\n        hashPass: hashPassword(pHash(passwordSalt)),\n        isValid,\n        updateUser, otherUsersWithSameUserNameOrEmail\n    });\n    userApp = createApp({ userRepository });\n});\ndescribe('UserApp', () => {\n    describe('saveUser', () => {\n        describe('insert', () => {\n            it('hash password', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Ângelo Ocanã',\n                    password: 'testPassword'\n                };\n                saveUser = save({ userRepository });\n                const user = await saveUser({ userArgs, authedUser });\n                ok(user.passwordHash, 'passwordHash not set');\n                notOk(user.password, 'password not empty');\n            });\n            it('do not call repository if user is invalid', async () => {\n                const userArgs = {\n                    userName: '',\n                    email: '',\n                    displayName: ''\n                };\n                await saveUser({ userArgs, authedUser });\n                ok(userRepository.save[notCalled]);\n            });\n            it('call repository if User is valid', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana'\n                };\n                await saveUser({ userArgs, authedUser });\n                ok(userRepository.save[calledOnce]);\n            });\n            it('set createdBy', async () => {\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: ''\n                };\n                const user = await saveUser({ userArgs, authedUser });\n                equal(user.createdBy, authedUser);\n            });\n        });\n        describe('update', () => {\n            it('update when new user data is valid', async () => {\n                // spy(userRepository, 'save');\n                // stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\n                const dbUser = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana'\n                };\n                stub(userRepository, 'getById').returns(dbUser);\n                const userArgs = {\n                    userName: 'angeloocana',\n                    email: 'angeloocana@gmail.com',\n                    displayName: 'Angelo Ocana Updated'\n                };\n                const userSaved = await saveUser({ userArgs, authedUser });\n                ok(userRepository.save[calledOnce]);\n                equal(userSaved.displayName, userArgs.displayName);\n            });\n        });\n    });\n    describe('authUser', () => {\n        it('return null when User not found', async () => {\n            const userNameOrEmail = 'angeloocana', password = 'teste';\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const user = await userApp.authUser({\n                form: { userNameOrEmail, password },\n                authedUser\n            });\n            notOk(user);\n        });\n        it('return null when User found but incorrect password', async () => {\n            const password = 'testeteste';\n            var user = createUser({\n                userName: 'angeloocana',\n                email: '',\n                displayName: '',\n                password\n            });\n            user = await userApp.hashPassword(user);\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            user = await userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password: 'incorrectPassword'\n                },\n                authedUser\n            });\n            notOk(user);\n        });\n        it('return user when correct password', async () => {\n            const password = 'testeteste';\n            var user = createUser({\n                userName: 'angeloocana',\n                email: 'alanmarcell@live.com',\n                displayName: 'Angelo Ocana',\n                password\n            });\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            userApp = createApp({ userRepository });\n            user = await userApp.hashPassword(user);\n            user = await userApp.authUser({\n                form: {\n                    userNameOrEmail: user.userName,\n                    password\n                },\n                authedUser\n            });\n            ok(user);\n            emptyArray(user.errors);\n        });\n    });\n    describe('getAuthToken', () => {\n        it('add errors when invalid userName or Email', async () => {\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = await getAuthToken({\n                authUserForm,\n                authUser,\n                encode: cEncode(tokenSecret)\n            }, {\n                form: {\n                    userNameOrEmail: 'ln',\n                    password: 'testtest'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        });\n        it('add error when invalid password', async () => {\n            spy(userRepository, 'getByUserNameOrEmail');\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'angeloocana',\n                    password: 't'\n                },\n                authedUser\n            });\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\n            notOk(authToken.authToken, 'Do NOT Generate token');\n            notOk(authToken.user, 'DO NOT return user');\n            notEmptyArray(authToken.errors, 'return errors');\n        });\n        it('generate token when correct password', async () => {\n            var user = createUser({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br', displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            userApp = createApp({ userRepository });\n            user = await userApp.hashPassword(user);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            ok(authToken.user, 'no user');\n            ok(authToken.user.id, 'no user id');\n            emptyArray(authToken.errors, 'return errors');\n        });\n        it('add errors when incorrect password', async () => {\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            notOk(authToken.authToken, 'do not generate token');\n            notOk(authToken.user, 'do not return user');\n            contains(authToken.errors, allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD, 'return invalid userName, email or password error');\n        });\n    });\n    describe('verifyAuthToken', () => {\n        it('Invalid token throws exception', async () => {\n            var hasError = false;\n            try {\n                await userApp.verifyAuthToken({\n                    token: 'Invalid_Token',\n                    authedUser\n                });\n            }\n            catch (err) {\n                hasError = true;\n            }\n            ok(hasError);\n        });\n        it('Valid token return user', async () => {\n            var user = createUser({\n                userName: 'lnsilva',\n                email: 'lucas.neris@globalpoints.com.br',\n                displayName: 'Lucas Neris',\n                password: '123456'\n            });\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\n            userApp = createApp({ userRepository });\n            user = await userApp.hashPassword(user);\n            const authToken = await userApp.getAuthToken({\n                form: {\n                    userNameOrEmail: 'lnsilva',\n                    password: '123456'\n                },\n                authedUser\n            });\n            ok(authToken.authToken, 'Empty Token');\n            const userByToken = await userApp.verifyAuthToken({\n                token: authToken.authToken,\n                authedUser\n            });\n            equal(userByToken.id, user.id, 'User Id dont match');\n            equal(userByToken.email, user.email, 'User Id dont match');\n            equal(userByToken.userName, user.userName, 'User Id dont match');\n            equal(userByToken.displayName, user.displayName, 'User Id dont match');\n        });\n    });\n    describe('updatePassword', () => {\n        it('return error when wrong password');\n        it('return error when invalid password');\n        it('update');\n    });\n    describe('updatePasswordToken', () => {\n        it('return error when wrong token');\n        it('return error when invalid password');\n        it('update');\n    });\n    describe('deleteUser', () => {\n        it('return error when user not found');\n        it('return error when authuser is not admin or the deleted user');\n        it('delete');\n    });\n    describe('findUsers', () => {\n        it('call repository', async () => {\n            const dbUsers = [{ name: 'teste' }];\n            stub(userRepository, 'find').returns(dbUsers);\n            userApp = createApp({ userRepository });\n            const query = {};\n            const options = { limit: 4 };\n            const users = await userApp.findUsers({ authedUser, options, query });\n            ok(userRepository.find[calledOnce]);\n            equal(users, dbUsers, 'users not returned');\n        });\n    });\n    describe('seed', () => {\n        it.skip('default users', async () => {\n            const seeded = await userApp.seed(authedUser);\n            ok(seeded);\n        });\n        it('custom users');\n    });\n});\n//# sourceMappingURL=userApp.test.js.map"]}