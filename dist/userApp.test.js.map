{"version":3,"sources":["../dist-esnext/userApp.test.js"],"names":["config","authedUser","dtCreated","Date","ip","calledOnce","notCalled","userRepository","userApp","passwordSalt","process","env","PASSWORD_SALT","saveUser","beforeEach","returns","hashPass","isValid","updateUser","otherUsersWithSameUserNameOrEmail","describe","it","userArgs","userName","email","displayName","password","user","passwordHash","save","createdBy","dbUser","userSaved","userNameOrEmail","authUser","form","hashPassword","errors","authToken","getAuthToken","getByUserNameOrEmail","id","ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD","hasError","verifyAuthToken","token","err","userByToken","dbUsers","name","query","options","limit","users","findUsers","find","seeded","seed"],"mappings":"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","file":"userApp.test.js","sourcesContent":["import dotenv from 'dotenv';\r\nimport { contains, emptyArray, equal, notEmptyArray, notOk, ok } from 'ptz-assert';\r\nimport { allErrors, createUser, otherUsersWithSameUserNameOrEmail, updateUser } from 'ptz-user-domain';\r\nimport { isValid } from 'ptz-validations';\r\nimport { spy, stub } from 'sinon';\r\nimport { createApp, hashPassword, pHash, saveUser as save } from './index';\r\nimport { createUserRepoFake } from './UserRepositoryFake';\r\ndotenv.config();\r\nconst authedUser = {\r\n    dtCreated: new Date(),\r\n    ip: '192.161.0.1'\r\n};\r\nconst calledOnce = 'calledOnce', notCalled = 'notCalled';\r\nvar userRepository;\r\nvar userApp;\r\nconst passwordSalt = process.env.PASSWORD_SALT;\r\nvar saveUser;\r\nbeforeEach(() => {\r\n    userRepository = createUserRepoFake();\r\n    spy(userRepository, 'save');\r\n    stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\r\n    saveUser = save({\r\n        userRepository,\r\n        hashPass: hashPassword(pHash(passwordSalt)),\r\n        isValid,\r\n        updateUser, otherUsersWithSameUserNameOrEmail\r\n    });\r\n    userApp = createApp({ userRepository });\r\n});\r\ndescribe('UserApp', () => {\r\n    describe('saveUser', () => {\r\n        describe('insert', () => {\r\n            it('hash password', async () => {\r\n                const userArgs = {\r\n                    userName: 'angeloocana',\r\n                    email: 'angeloocana@gmail.com',\r\n                    displayName: 'Ângelo Ocanã',\r\n                    password: 'testPassword'\r\n                };\r\n                const user = await saveUser({ userArgs, authedUser });\r\n                ok(user.passwordHash, 'passwordHash not set');\r\n                notOk(user.password, 'password not empty');\r\n            });\r\n            it('do not call repository if user is invalid', async () => {\r\n                const userArgs = {\r\n                    userName: '',\r\n                    email: '',\r\n                    displayName: ''\r\n                };\r\n                await saveUser({ userArgs, authedUser });\r\n                ok(userRepository.save[notCalled]);\r\n            });\r\n            it('call repository if User is valid', async () => {\r\n                const userArgs = {\r\n                    userName: 'angeloocana',\r\n                    email: 'angeloocana@gmail.com',\r\n                    displayName: 'Angelo Ocana'\r\n                };\r\n                await saveUser({ userArgs, authedUser });\r\n                ok(userRepository.save[calledOnce]);\r\n            });\r\n            it('set createdBy', async () => {\r\n                const userArgs = {\r\n                    userName: 'angeloocana',\r\n                    email: 'angeloocana@gmail.com',\r\n                    displayName: ''\r\n                };\r\n                const user = await saveUser({ userArgs, authedUser });\r\n                equal(user.createdBy, authedUser);\r\n            });\r\n        });\r\n        describe('update', () => {\r\n            it('update when new user data is valid', async () => {\r\n                // spy(userRepository, 'save');\r\n                // stub(userRepository, 'getOtherUsersWithSameUserNameOrEmail').returns([]);\r\n                const dbUser = {\r\n                    userName: 'angeloocana',\r\n                    email: 'angeloocana@gmail.com',\r\n                    displayName: 'Angelo Ocana'\r\n                };\r\n                stub(userRepository, 'getById').returns(dbUser);\r\n                const userArgs = {\r\n                    userName: 'angeloocana',\r\n                    email: 'angeloocana@gmail.com',\r\n                    displayName: 'Angelo Ocana Updated'\r\n                };\r\n                const userSaved = await saveUser({ userArgs, authedUser });\r\n                ok(userRepository.save[calledOnce]);\r\n                equal(userSaved.displayName, userArgs.displayName);\r\n            });\r\n        });\r\n    });\r\n    describe('authUser', () => {\r\n        it('return null when User not found', async () => {\r\n            const userNameOrEmail = 'angeloocana', password = 'teste';\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\r\n            const user = await userApp.authUser({\r\n                form: { userNameOrEmail, password },\r\n                authedUser\r\n            });\r\n            notOk(user);\r\n        });\r\n        it('return null when User found but incorrect password', async () => {\r\n            const password = 'testeteste';\r\n            var user = createUser({\r\n                userName: 'angeloocana',\r\n                email: '',\r\n                displayName: '',\r\n                password\r\n            });\r\n            user = await userApp.hashPassword(user);\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\r\n            user = await userApp.authUser({\r\n                form: {\r\n                    userNameOrEmail: user.userName,\r\n                    password: 'incorrectPassword'\r\n                },\r\n                authedUser\r\n            });\r\n            notOk(user);\r\n        });\r\n        it('return user when correct password', async () => {\r\n            const password = 'testeteste';\r\n            var user = createUser({\r\n                userName: 'angeloocana',\r\n                email: 'alanmarcell@live.com',\r\n                displayName: 'Angelo Ocana',\r\n                password\r\n            });\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\r\n            userApp = createApp({ userRepository });\r\n            user = await userApp.hashPassword(user);\r\n            user = await userApp.authUser({\r\n                form: {\r\n                    userNameOrEmail: user.userName,\r\n                    password\r\n                },\r\n                authedUser\r\n            });\r\n            ok(user);\r\n            emptyArray(user.errors);\r\n        });\r\n    });\r\n    describe('getAuthToken', () => {\r\n        it('add errors when invalid userName or Email', async () => {\r\n            spy(userRepository, 'getByUserNameOrEmail');\r\n            const authToken = await userApp.getAuthToken({\r\n                form: {\r\n                    userNameOrEmail: 'ln',\r\n                    password: 'testtest'\r\n                },\r\n                authedUser\r\n            });\r\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\r\n            notOk(authToken.authToken, 'Do NOT Generate token');\r\n            notOk(authToken.user, 'DO NOT return user');\r\n            notEmptyArray(authToken.errors, 'return errors');\r\n        });\r\n        it('add error when invalid password', async () => {\r\n            spy(userRepository, 'getByUserNameOrEmail');\r\n            const authToken = await userApp.getAuthToken({\r\n                form: {\r\n                    userNameOrEmail: 'angeloocana',\r\n                    password: 't'\r\n                },\r\n                authedUser\r\n            });\r\n            ok(userRepository.getByUserNameOrEmail[notCalled], 'Do NOT call repository getByUserNameOrEmail()');\r\n            notOk(authToken.authToken, 'Do NOT Generate token');\r\n            notOk(authToken.user, 'DO NOT return user');\r\n            notEmptyArray(authToken.errors, 'return errors');\r\n        });\r\n        it('generate token when correct password', async () => {\r\n            var user = createUser({\r\n                userName: 'lnsilva',\r\n                email: 'lucas.neris@globalpoints.com.br', displayName: 'Lucas Neris',\r\n                password: '123456'\r\n            });\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\r\n            userApp = createApp({ userRepository });\r\n            user = await userApp.hashPassword(user);\r\n            const authToken = await userApp.getAuthToken({\r\n                form: {\r\n                    userNameOrEmail: 'lnsilva',\r\n                    password: '123456'\r\n                },\r\n                authedUser\r\n            });\r\n            ok(authToken.authToken, 'Empty Token');\r\n            ok(authToken.user, 'no user');\r\n            ok(authToken.user.id, 'no user id');\r\n            emptyArray(authToken.errors, 'return errors');\r\n        });\r\n        it('add errors when incorrect password', async () => {\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(null);\r\n            const authToken = await userApp.getAuthToken({\r\n                form: {\r\n                    userNameOrEmail: 'lnsilva',\r\n                    password: '123456'\r\n                },\r\n                authedUser\r\n            });\r\n            notOk(authToken.authToken, 'do not generate token');\r\n            notOk(authToken.user, 'do not return user');\r\n            contains(authToken.errors, allErrors.ERROR_USERAPP_GETAUTHTOKEN_INVALID_USERNAME_OR_PASSWORD, 'return invalid userName, email or password error');\r\n        });\r\n    });\r\n    describe('verifyAuthToken', () => {\r\n        it('Invalid token throws exception', async () => {\r\n            var hasError = false;\r\n            try {\r\n                await userApp.verifyAuthToken({\r\n                    token: 'Invalid_Token',\r\n                    authedUser\r\n                });\r\n            }\r\n            catch (err) {\r\n                hasError = true;\r\n            }\r\n            ok(hasError);\r\n        });\r\n        it('Valid token return user', async () => {\r\n            var user = createUser({\r\n                userName: 'lnsilva',\r\n                email: 'lucas.neris@globalpoints.com.br',\r\n                displayName: 'Lucas Neris',\r\n                password: '123456'\r\n            });\r\n            stub(userRepository, 'getByUserNameOrEmail').returns(user);\r\n            userApp = createApp({ userRepository });\r\n            user = await userApp.hashPassword(user);\r\n            const authToken = await userApp.getAuthToken({\r\n                form: {\r\n                    userNameOrEmail: 'lnsilva',\r\n                    password: '123456'\r\n                },\r\n                authedUser\r\n            });\r\n            ok(authToken.authToken, 'Empty Token');\r\n            const userByToken = await userApp.verifyAuthToken({\r\n                token: authToken.authToken,\r\n                authedUser\r\n            });\r\n            equal(userByToken.id, user.id, 'User Id dont match');\r\n            equal(userByToken.email, user.email, 'User Id dont match');\r\n            equal(userByToken.userName, user.userName, 'User Id dont match');\r\n            equal(userByToken.displayName, user.displayName, 'User Id dont match');\r\n        });\r\n    });\r\n    describe('updatePassword', () => {\r\n        it('return error when wrong password');\r\n        it('return error when invalid password');\r\n        it('update');\r\n    });\r\n    describe('updatePasswordToken', () => {\r\n        it('return error when wrong token');\r\n        it('return error when invalid password');\r\n        it('update');\r\n    });\r\n    describe('deleteUser', () => {\r\n        it('return error when user not found');\r\n        it('return error when authuser is not admin or the deleted user');\r\n        it('delete');\r\n    });\r\n    describe('findUsers', () => {\r\n        it('call repository', async () => {\r\n            const dbUsers = [{ name: 'teste' }];\r\n            stub(userRepository, 'find').returns(dbUsers);\r\n            userApp = createApp({ userRepository });\r\n            const query = {};\r\n            const options = { limit: 4 };\r\n            const users = await userApp.findUsers({ authedUser, options, query });\r\n            ok(userRepository.find[calledOnce]);\r\n            equal(users, dbUsers, 'users not returned');\r\n        });\r\n    });\r\n    describe('seed', () => {\r\n        it('default users', async () => {\r\n            const dbUsers = [{ name: 'teste' }];\r\n            stub(userRepository, 'find').returns(dbUsers);\r\n            const seeded = await userApp.seed(userRepository);\r\n            ok(seeded);\r\n        });\r\n        it('custom users');\r\n    });\r\n});\r\n//# sourceMappingURL=userApp.test.js.map"]}